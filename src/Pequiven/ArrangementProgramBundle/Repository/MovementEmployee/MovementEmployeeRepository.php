<?php

namespace Pequiven\ArrangementProgramBundle\Repository\MovementEmployee;

use Pequiven\ArrangementProgramBundle\Entity\ArrangementProgram;
use Pequiven\SEIPBundle\Entity\Period;
use Pequiven\SEIPBundle\Entity\User;
use Pequiven\ArrangementProgramBundle\Entity\Goal;
use Pequiven\SEIPBundle\Doctrine\ORM\SeipEntityRepository as EntityRepository;

/**
 * Repositorio de MOVIMIENTO DE EMPLEADOS
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovementEmployeeRepository extends EntityRepository {

    function FindMovementDetailsbyGoal($idGoal) {
        $qb = $this->getQueryBuilder();
        $qb
                ->Select('mov')
                ->andWhere('mov.id_affected= :goals')
                ->andWhere('mov.typeMov= :type')
                ->orderBy('mov.date')
                ->setParameter('goals', $idGoal)
                ->setParameter('type', "Goal")

        ;
        return $qb->getQuery()->getResult();
    }

    function FindMovementDetailsbyGoalbyUser($idGoal, $idUser) {
        $qb = $this->getQueryBuilder();
        $qb
                ->Select('mov')
                ->andWhere('mov.id_affected= :goals')
                ->andWhere('mov.typeMov= :type')
                ->andWhere('mov.User= :user')
                ->orderBy('mov.date')
                ->setParameter('goals', $idGoal)
                ->setParameter('user', $idUser)
                ->setParameter('type', "Goal")
        ;
        return $qb->getQuery()->getResult();
    }

    function FindMovementDetailsbyAP($idAP) {
        $qb = $this->getQueryBuilder();
        $qb
                ->Select('mov')
                ->andWhere('mov.id_affected= :AP')
                ->andWhere('mov.typeMov= :type')
                ->orderBy('mov.date')
                ->setParameter('AP', $idAP)
                ->setParameter('type', "AP")

        ;
        return $qb->getQuery()->getResult();
    }

    function FindMovementDetailsbyAPbyUser($idAP, $idUser) {
        $qb = $this->getQueryBuilder();
        $qb
                ->Select('mov')
                ->andWhere('mov.id_affected= :AP')
                ->andWhere('mov.typeMov= :type')
                ->andWhere('mov.User= :user')
                ->orderBy('mov.date')
                ->setParameter('AP', $idAP)
                ->setParameter('user', $idUser)
                ->setParameter('type', "AP")
        ;
        return $qb->getQuery()->getResult();
    }

    function getAlias() {
        return 'mov';
    }

}
